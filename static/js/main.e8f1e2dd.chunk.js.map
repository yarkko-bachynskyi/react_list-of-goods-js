{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORTED_BY_ALPHABET","SORTED_BY_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","showResetButton","setShowResetButton","changedGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","handleSortChange","newSortField","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAqB,OACrBC,EAAmB,SA2BZC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8CJ,oBAAS,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAEMC,EA9BiB,SAACC,EAAD,GAAuC,IAA7BP,EAA4B,EAA5BA,UAAWE,EAAiB,EAAjBA,WACtCM,EAAa,YAAOD,GAqB1B,OAnBIP,GACFQ,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQX,GACN,KAAKJ,EACH,OAAOc,EAAME,cAAcD,GAE7B,KAAKd,EACH,OAAOa,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXX,GACFM,EAAcM,UAGTN,EAQcO,CAAiBpB,EAAiB,CACrDK,YACAE,eASIc,EAAmB,SAACC,GACxBhB,EAAagB,GACbZ,GAAmB,IAQrB,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMH,EAAiBpB,IAChCwB,KAAK,SACLF,UAAWG,IAAG,SAAU,CACtB,UAAWrB,IAAcJ,EACzB,WAAYI,IAAcJ,IAL9B,iCAWA,wBACEuB,QAAS,kBAAMH,EAAiBnB,IAChCuB,KAAK,SACLF,UAAWG,IAAG,SAAU,CACtB,aAAcrB,IAAcH,EAC5B,WAAYG,IAAcH,IAL9B,4BAWA,wBACEsB,QA/BoB,WAC1BhB,GAAeD,GACfG,GAAmB,IA8Bbe,KAAK,SACLF,UAAWG,IAAG,SAAU,CACtB,aAAcnB,EACd,YAAaA,IALjB,qBAWCE,GACC,wBACEe,QAtDQ,WAChBlB,EAAa,IACbE,GAAc,GACdE,GAAmB,IAoDXe,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCtHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e8f1e2dd.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORTED_BY_ALPHABET = 'name';\nconst SORTED_BY_LENGTH = 'length';\n\nconst getPreparedGoods = (goods, { sortField, isReversed }) => {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORTED_BY_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORTED_BY_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const [showResetButton, setShowResetButton] = useState(false);\n\n  const changedGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  const clearSort = () => {\n    setSortField('');\n    setIsReversed(false);\n    setShowResetButton(false);\n  };\n\n  const handleSortChange = (newSortField) => {\n    setSortField(newSortField);\n    setShowResetButton(true);\n  };\n\n  const handleReverseToggle = () => {\n    setIsReversed(!isReversed);\n    setShowResetButton(true);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => handleSortChange(SORTED_BY_ALPHABET)}\n          type=\"button\"\n          className={cn('button', {\n            'is-info': sortField === SORTED_BY_ALPHABET,\n            'is-light': sortField !== SORTED_BY_ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => handleSortChange(SORTED_BY_LENGTH)}\n          type=\"button\"\n          className={cn('button', {\n            'is-success': sortField === SORTED_BY_LENGTH,\n            'is-light': sortField !== SORTED_BY_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverseToggle}\n          type=\"button\"\n          className={cn('button', {\n            'is-warning': isReversed,\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {showResetButton && (\n          <button\n            onClick={clearSort}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {changedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}